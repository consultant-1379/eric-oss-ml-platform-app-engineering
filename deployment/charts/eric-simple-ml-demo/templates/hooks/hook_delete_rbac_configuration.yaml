apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "eric-simple-ml-demo.name" . }}-delete-rbac-configuration-hook
  labels:
    {{- include "eric-simple-ml-demo.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-delete, pre-rollback, pre-upgrade"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "hook-succeeded, before-hook-creation"
spec:
  template:
    metadata:
      labels:
        app: {{ include "eric-simple-ml-demo.name" . }}
    spec:
      serviceAccountName: {{ include "eric-simple-ml-demo.name" . }}-sa
      {{- if include "eric-simple-ml-demo.pullSecrets" . }}
      imagePullSecrets:
        - name: {{ template "eric-simple-ml-demo.pullSecrets" . }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- include "eric-simple-ml-demo.nodeSelector" . | nindent 6 }}
      restartPolicy: Never
      containers:
        - name: keycloak-client
          image: {{ template "eric-simple-ml-demo.imagePath" (dict "imageId" "keycloak-client" "values" .Values "files" .Files) }}
          imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - all
          env:
          - name: IAM_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.iam.adminSecret | quote }}
                key: {{ .Values.global.iam.userKey | quote }}
          - name: IAM_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.iam.adminSecret | quote }}
                key: {{ .Values.global.iam.passwordKey | quote }}
          args:
            - "delete"
            - "authz"
            - "--keycloak_hostname={{ .Values.global.hosts.iam }}"
            - "--keycloak_user=$(IAM_ADMIN_USER)"
            - "--keycloak_password=$(IAM_ADMIN_PASSWORD)"
            - "--client_name={{ .Values.global.iam.clientId }}"
            - "--provider={{ .Chart.Name }}"
          volumeMounts:
            - name: create-cacert-volume
              mountPath: /mnt/certs
      volumes:
        - name: create-cacert-volume
          secret:
            secretName: {{ .Values.iam.cacert.secretName | quote }}
            items:
              - key: {{ .Values.iam.cacert.key | quote }}
                path: {{ .Values.iam.cacert.filePath | quote }}
